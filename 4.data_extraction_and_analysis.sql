# Read all the data from all tables
USE supply_chain;

# read the data from customer tables
SELECT * FROM Customer;

# read the data from Orders tables
SELECT * FROM Orders;

# read the data from Supplier tables
SELECT * FROM Supplier;


# read the data from Product tables
SELECT * FROM Product;


# read the data from OrderItem tables
SELECT * FROM OrderItem;


# 2. Find the customers count with respect to each country
SELECT Country, COUNT(Id) as cust_count 
FROM Customer 
GROUP BY Country 
ORDER BY cust_count DESC;

# 3. Display the products that are not discontinued
SELECT * FROM Product
WHERE IsDiscontinued = 0;

# 4. Display the list of companies along with the product name that they are supplying
SELECT s.CompanyName, p.ProductName 
From Supplier s 
JOIN Product p 
ON s.Id=p.SupplierId;

# 5. Display the information of Customer living in 'Mexico'
SELECT * 
FROM Customer 
WHERE Country='Mexico';

# 6. Display the costiest item that is ordered by the customers
SELECT c.Id AS customer_id, p.ProductName, p.UnitPrice 
FROM Customer c 
JOIN Orders o 
ON c.Id=o.CustomerId
JOIN OrderItem oi ON o.Id=oi.OrderId
JOIN Product p ON p.Id=oi.ProductId
WHERE (c.Id,p.UnitPrice) IN 
(SELECT c.Id, MAX(p.UnitPrice)
FROM Product p
JOIN OrderItem oi ON oi.ProductId=p.Id
JOIN Orders o ON o.Id=oi.OrderId
JOIN Customer c ON o.CustomerId=c.Id
GROUP BY c.ID);

#7. Display supplier Id who own the highest number of products

WITH max_p AS (
SELECT s.Id,
COUNT(p.Id) AS count_products
FROM Supplier s 
JOIN Product p ON p.SupplierId = s.Id
GROUP BY s.Id)
SELECT * FROM max_p WHERE count_products IN
(SELECT MAX(count_products) FROM max_p);

#8 Display month-wise and year-wise counts of the orders which are placed
SELECT YEAR(OrderDate) AS year, 
MONTH(OrderDate) AS month, 
COUNT(Id) as order_count 
FROM Orders
GROUP BY YEAR(OrderDate), MONTH(OrderDate) 
ORDER BY year ASC, month ASC;


#9 Which country has the maximum number of suppliers
SELECT Country, COUNT(Id) as count_supplier FROM Supplier 
GROUP BY Country 
ORDER BY count_supplier DESC 
LIMIT 1;

#10 Which customer did not place any order?
SELECT * FROM Customer
WHERE Id NOT IN 
(SELECT CustomerId FROM Orders);

#11 Arrange the ProductID and Name based on the high demand by the customer
SELECT p.Id AS product_id, p.ProductName, 
SUM(oi.Quantity) AS total_quantity
FROM OrderItem oi 
JOIN Product p ON p.Id=oi.ProductId
GROUP BY p.Id, p.ProductName 
ORDER BY total_quantity DESC;

#12  Display the total number of Orders delivered every year
SELECT YEAR(OrderDate),COUNT(ID) AS total_order from Orders 
GROUP BY YEAR(OrderDate);

#13 calculate year-wise revenue
SELECT YEAR(OrderDate) AS year, 
SUM(TotalAmount) AS total_revenue 
FROM Orders GROUP BY YEAR(OrderDate);

#14 Display the customer details whose order amount is maximum including his past year
SELECT c.*, 
SUM(TotalAmount) AS TotalRevenue 
FROM Customer c 
JOIN  Orders o ON o.CustomerId=c.Id
GROUP BY c.Id ORDER BY SUM(TotalAmount) DESC LIMIT 5;

#15  Display the total number Ordered by each Customer from high to low
SELECT c.*, 
COUNT(CustomerId) AS count_order
FROM Customer c 
JOIN  Orders o ON o.CustomerId=c.Id
GROUP BY c.Id ORDER BY COUNT(CustomerId) DESC LIMIT 5;

## For sales and marketing department
#16 list the current and prevoius order dates for each customer
SELECT c.Id AS CustomerId, c.FirstName, o.OrderDate 
FROM Customer c 
JOIN Orders o ON o.CustomerId=c.Id
ORDER BY CustomerId, OrderDate;

#17  Find out the top 3 Suppliers in term of revenue generated by their product
SELECT s.Id AS SupplierId, s.ContactName, SUM(Quantity * oi.UnitPrice) AS total_revenue
FROM Supplier s
JOIN Product p ON s.Id=p.SupplierID
JOIN OrderItem oi ON oi.ProductId=p.Id
JOIN Orders o ON o.Id=oi.OrderId
GROUP BY s.Id, s.ContactName ORDER BY total_revenue DESC;

# 18 Display the latest order date of all the customers with customer details
SELECT c.*, MIN(OrderDate) AS latest_order_date
FROM Customer c 
JOIN Orders o ON o.CustomerId=c.Id
GROUP BY c.Id;


#19  Display the product name and supplier name for each order
SELECT oi.OrderID, p.ProductName, s.ContactName AS SupplierName
FROM Supplier s 
JOIN Product p ON p.SupplierId=s.Id
JOIN OrderItem oi ON oi.ProductId=p.Id
JOIN Orders o ON o.Id=oi.OrderId;

#20 Fetch the customer details who ordered more than 10 products in a single order
WITH product_ordered AS (
SELECT DISTINCT c.*, COUNT(o.Id) OVER (PARTITION BY c.Id) AS count
FROM Customer c JOIN ORDERS o ON o.CustomerId)
SELECT * FROM product_ordered WHERE count>10 ORDER BY count DESC;

#21 Display all the product details with ordered quantity 1
SELECT p. * FROM Product p 
JOIN OrderItem oi ON oi.ProductId=p.Id 
WHERE Quantity =1;


#22 Display companies that supply products whose cost is above 100
SELECT DISTINCT s.* 
FROM Supplier s 
JOIN Product p ON p.SupplierId=s.Id
JOIN OrderItem oi ON oi.ProductId=p.Id 
WHERE oi.UnitPrice>100;

#23 Create a combined list to display customers and suppliers lists as per below format
# Display the customer list who belongs to the same city and country arranged in country-wise

SELECT DISTINCT c1.Id, c1.FirstName, c2.FirstName, c1.City, c1.Country
FROM Customer c1 
JOIN Customer c2 
ON (c1.City, c1.Country)=(c2.City, c2.Country)
WHERE c1.Id<>c2.Id
ORDER BY c1.Country;

#24 The company sells the products at different discount rates, Refer actual product price in the product table 
# and selling price in the order item table. Write a querry to find out the total amount saved in each order then
# display the orders from highest to lowest amount saved

SELECT oi.OrderId, SUM((p.UnitPrice-oi.UnitPrice) * oi.Quantity) AS total_amount_saved
FROM Product p 
JOIN OrderItem oi ON p.Id=oi.ProductId
GROUP BY oi.OrderId 
ORDER BY total_amount_saved DESC;


#25 Mr. Kavin wants to become a supplier. He got the database of "Richard's supply" for reference. 
#Help him to Pick
#List a few products that should choose based on demand
#Who will be the competitor for him for the product suggested in the above question

SELECT DISTINCT s.ContactName, p.ProductName
FROM OrderItem oi 
JOIN Product p ON p.Id=oi.ProductId
JOIN Supplier s ON p.SupplierId=s.Id
GROUP BY p.Id, p.ProductName, s.ContactName 
HAVING SUM(oi.Quantity) > 1000
ORDER BY s.ContactName;


#Create a combined list to display customers' and suppliers' details considering the following criteria 
#Both customer and supplier belong to the same country 
#Customers who do not have a supplier in their country
#A supplier who does not have customers in their country

SELECT c.*, s.* FROM Customer c 
JOIN Supplier s ON s.Country=c.Country
UNION ALL

SELECT c.*, s.* FROM Customer c 
LEFT JOIN Supplier s ON s.Country=c.Country
WHERE s.Country IS NULL
UNION ALL
SELECT c.*, s.* FROM Customer c 
RIGHT JOIN Supplier s ON s.Country=c.Country
WHERE c.Country IS NULL;


# 27 Find out for which products, the UK is dependent on other countries for the supply. 
# List the countries which are supplying these products in the same list.

SELECT DISTINCT c.Country AS UK, s.Country AS IMPORT_FROM, p.ProductName
FROM Customer c 
JOIN Supplier s ON s.Country<>c.Country
JOIN Product p ON SupplierId=s.Id
WHERE c.Country='UK';